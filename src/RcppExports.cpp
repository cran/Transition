// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// add_transitions
DataFrame add_transitions(DataFrame object, const char* subject, const char* timepoint, const char* result, const char* transition, int cap, int modulate);
RcppExport SEXP _Transition_add_transitions(SEXP objectSEXP, SEXP subjectSEXP, SEXP timepointSEXP, SEXP resultSEXP, SEXP transitionSEXP, SEXP capSEXP, SEXP modulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type object(objectSEXP);
    Rcpp::traits::input_parameter< const char* >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< const char* >::type timepoint(timepointSEXP);
    Rcpp::traits::input_parameter< const char* >::type result(resultSEXP);
    Rcpp::traits::input_parameter< const char* >::type transition(transitionSEXP);
    Rcpp::traits::input_parameter< int >::type cap(capSEXP);
    Rcpp::traits::input_parameter< int >::type modulate(modulateSEXP);
    rcpp_result_gen = Rcpp::wrap(add_transitions(object, subject, timepoint, result, transition, cap, modulate));
    return rcpp_result_gen;
END_RCPP
}
// get_transitions
IntegerVector get_transitions(DataFrame object, const char* subject, const char* timepoint, const char* result, int cap, int modulate);
RcppExport SEXP _Transition_get_transitions(SEXP objectSEXP, SEXP subjectSEXP, SEXP timepointSEXP, SEXP resultSEXP, SEXP capSEXP, SEXP modulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type object(objectSEXP);
    Rcpp::traits::input_parameter< const char* >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< const char* >::type timepoint(timepointSEXP);
    Rcpp::traits::input_parameter< const char* >::type result(resultSEXP);
    Rcpp::traits::input_parameter< int >::type cap(capSEXP);
    Rcpp::traits::input_parameter< int >::type modulate(modulateSEXP);
    rcpp_result_gen = Rcpp::wrap(get_transitions(object, subject, timepoint, result, cap, modulate));
    return rcpp_result_gen;
END_RCPP
}
// add_prev_date
DataFrame add_prev_date(DataFrame object, const char* subject, const char* timepoint, const char* result, const char* prev_date);
RcppExport SEXP _Transition_add_prev_date(SEXP objectSEXP, SEXP subjectSEXP, SEXP timepointSEXP, SEXP resultSEXP, SEXP prev_dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type object(objectSEXP);
    Rcpp::traits::input_parameter< const char* >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< const char* >::type timepoint(timepointSEXP);
    Rcpp::traits::input_parameter< const char* >::type result(resultSEXP);
    Rcpp::traits::input_parameter< const char* >::type prev_date(prev_dateSEXP);
    rcpp_result_gen = Rcpp::wrap(add_prev_date(object, subject, timepoint, result, prev_date));
    return rcpp_result_gen;
END_RCPP
}
// get_prev_date
DateVector get_prev_date(DataFrame object, const char* subject, const char* timepoint, const char* result);
RcppExport SEXP _Transition_get_prev_date(SEXP objectSEXP, SEXP subjectSEXP, SEXP timepointSEXP, SEXP resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type object(objectSEXP);
    Rcpp::traits::input_parameter< const char* >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< const char* >::type timepoint(timepointSEXP);
    Rcpp::traits::input_parameter< const char* >::type result(resultSEXP);
    rcpp_result_gen = Rcpp::wrap(get_prev_date(object, subject, timepoint, result));
    return rcpp_result_gen;
END_RCPP
}
// add_prev_result
DataFrame add_prev_result(DataFrame object, const char* subject, const char* timepoint, const char* result, const char* prev_result);
RcppExport SEXP _Transition_add_prev_result(SEXP objectSEXP, SEXP subjectSEXP, SEXP timepointSEXP, SEXP resultSEXP, SEXP prev_resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type object(objectSEXP);
    Rcpp::traits::input_parameter< const char* >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< const char* >::type timepoint(timepointSEXP);
    Rcpp::traits::input_parameter< const char* >::type result(resultSEXP);
    Rcpp::traits::input_parameter< const char* >::type prev_result(prev_resultSEXP);
    rcpp_result_gen = Rcpp::wrap(add_prev_result(object, subject, timepoint, result, prev_result));
    return rcpp_result_gen;
END_RCPP
}
// get_prev_result
IntegerVector get_prev_result(DataFrame object, const char* subject, const char* timepoint, const char* result);
RcppExport SEXP _Transition_get_prev_result(SEXP objectSEXP, SEXP subjectSEXP, SEXP timepointSEXP, SEXP resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type object(objectSEXP);
    Rcpp::traits::input_parameter< const char* >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< const char* >::type timepoint(timepointSEXP);
    Rcpp::traits::input_parameter< const char* >::type result(resultSEXP);
    rcpp_result_gen = Rcpp::wrap(get_prev_result(object, subject, timepoint, result));
    return rcpp_result_gen;
END_RCPP
}
// uniques
List uniques(DataFrame object, const char* subject, const char* timepoint, const char* result);
RcppExport SEXP _Transition_uniques(SEXP objectSEXP, SEXP subjectSEXP, SEXP timepointSEXP, SEXP resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type object(objectSEXP);
    Rcpp::traits::input_parameter< const char* >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< const char* >::type timepoint(timepointSEXP);
    Rcpp::traits::input_parameter< const char* >::type result(resultSEXP);
    rcpp_result_gen = Rcpp::wrap(uniques(object, subject, timepoint, result));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Transition_add_transitions", (DL_FUNC) &_Transition_add_transitions, 7},
    {"_Transition_get_transitions", (DL_FUNC) &_Transition_get_transitions, 6},
    {"_Transition_add_prev_date", (DL_FUNC) &_Transition_add_prev_date, 5},
    {"_Transition_get_prev_date", (DL_FUNC) &_Transition_get_prev_date, 4},
    {"_Transition_add_prev_result", (DL_FUNC) &_Transition_add_prev_result, 5},
    {"_Transition_get_prev_result", (DL_FUNC) &_Transition_get_prev_result, 4},
    {"_Transition_uniques", (DL_FUNC) &_Transition_uniques, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_Transition(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
